{"version":3,"sources":["logo.svg","components/SideNavs.js","screens/MainScreen.js","components/DataTable.js","screens/Invoices.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SideNavs","state","top","left","bottom","right","toggleDrawer","side","open","_this","setState","Object","defineProperty","_this2","this","_this$props","props","classes","NavItems","sideList","react_default","a","createElement","className","list","List_default","map","navItem","ListItem_default","button","key","id","component","Component","to","link","ListItemText_default","primary","name","io","onClick","style","width","height","marginTop","color","cursor","Drawer_default","onClose","tabIndex","role","onKeyDown","React","withStyles","fullList","MainScreen","columns","options","filter","sort","DataTable","data","toConsumableArray","invoiceData","filterType","responsive","selectableRows","rowHover","onRowClick","e","console","log","ID","formatData","type","accountNo","accountName","currency","balance","status","dist_default","title","Invoices","_this$state","values","components_DataTable","index_es","withRouter","Main_Main","Main","navItems","components_SideNavs","Link","Switch","Route","exact","path","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f5a9e20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { IoIosMenu } from \"react-icons/io\";\n\nconst styles = {\n  list: {\n    width: 250\n  },\n  fullList: {\n    width: \"auto\"\n  }\n};\n\nclass SideNavs extends React.Component {\n  state = {\n    top: false,\n    left: false,\n    bottom: false,\n    right: false\n  };\n  toggleDrawer = (side, open) => () => {\n    this.setState({\n      [side]: open\n    });\n  };\n\n  render() {\n    const { classes, NavItems } = this.props;\n\n    const sideList = (\n      <div className={classes.list}>\n        <List>\n          {NavItems.map(navItem => (\n            <ListItem\n              button={true}\n              key={navItem.id}\n              component={this.props.Component}\n              to={navItem.link}\n            >\n              <ListItemText primary={navItem.name} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n\n    return (\n      <div>\n        <IoIosMenu\n          onClick={this.toggleDrawer(\"left\", true)}\n          style={{ width: 40, height: 40, marginTop: \"1em\", color: \"inherit\", cursor: \"pointer\" }}\n        />\n\n        <Drawer\n          open={this.state.left}\n          onClose={this.toggleDrawer(\"left\", false)}\n        >\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onClick={this.toggleDrawer(\"left\", false)}\n            onKeyDown={this.toggleDrawer(\"left\", false)}\n          >\n            {sideList}\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nSideNavs.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(SideNavs);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass MainScreen extends Component {\n  render() {\n    return (<div>\n      Main Screen\n      \n      </div>);\n  }\n}\n\nMainScreen.propTypes = {};\n\nexport default MainScreen;\n","import React, { Component } from \"react\";\nimport MUIDataTable from \"mui-datatables\";\n\nimport invoiceData from \"../Data/data.json\";\n\nconst columns = [\n  {\n    name: \"Id\",\n    options: {\n      filter: false,\n      sort: true,\n    }\n  },\n  {\n    name: \"Type\",\n    options: {\n      filter: true,\n      sort: true\n    }\n  },\n  {\n    name: \"Acc. No\",\n    options: {\n      filter: false,\n      sort: false\n    }\n  },\n  {\n    name: \"Acc. Name\",\n    options: {\n      filter: true,\n      sort: false\n    }\n  },\n  {\n    name: \"Currency\",\n    options: {\n      filter: true,\n      sort: false\n    }\n  },\n  {\n    name: \"Balance\",\n    options: {\n      filter: false,\n      sort: false\n    }\n  },\n  {\n    name: \"Status\",\n    options: {\n      filter: true,\n      sort: false\n    }\n  }\n];\n\nclass DataTable extends Component {\n  state = {\n    data: []\n  };\n\n  componentWillMount() {\n    this.setState({\n      data: [...invoiceData.data]\n    });\n  }\n\n  render() {\n    const options = {\n      filter: true,\n      filterType: \"multiSelect\",\n      responsive: \"stacked\",\n      selectableRows: false,\n      rowHover: true,\n      onRowClick: e => {\n        console.log(e[0]);\n        return this.props.ID(e[0]);\n      }\n    };\n    const formatData = this.state.data.map(e => {\n      \n      return [\n        e.id,\n        e.type,\n        e.accountNo,\n        e.accountName,\n        e.currency,\n        e.balance,\n        e.status\n      ];\n    });\n\n    return (\n      <MUIDataTable\n        title={\"Accounts List\"}\n        data={formatData}\n        columns={columns}\n        options={options}\n      />\n    );\n  }\n}\n\nexport default DataTable;\n","import React, { Component } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardMedia,\n  CardContent,\n  Typography\n} from \"@material-ui/core\";\nimport DataTable from \"../components/DataTable\";\nimport invoiceData from \"../Data/data.json\";\nimport \"./style.css\";\n\nclass Invoices extends Component {\n  state = {\n    id: 1,\n    data: []\n  };\n\n  componentWillMount() {\n    this.setState({\n      data: [...invoiceData.data]\n    });\n  }\n\n  render() {\n    const { data, id } = this.state;\n    const values = Object.values(data);\n    console.log(\"Screen send\", id);\n    return (\n      <div className=\"container\">\n        <h1>All Invoices For 2018</h1>\n        <div className=\"data-table\">\n          <DataTable ID={id => this.setState({ id })} />\n        </div>\n\n        <div className=\"detail-box\">\n          <Card>\n            <CardHeader title={values[id - 1].accountName} />\n            <CardContent>Type: {values[id - 1].type}</CardContent>\n          </Card>\n          <Card>\n            <CardContent>Acc #: {values[id - 1].accountNo} </CardContent>\n            \n            <CardContent>Status: {values[id - 1].status}</CardContent>\n          </Card>\n          <Card>\n            <CardContent>Currency:{values[id - 1].currency} </CardContent>\n            \n            <CardContent>Balance: {values[id - 1].balance}</CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n\nInvoices.propTypes = {};\n\nexport default Invoices;\n","import React, { Component } from \"react\";\nimport { Switch, Route, Link, withRouter } from \"react-router-dom\";\nimport { Typography, Grow } from \"@material-ui/core\";\nimport SideNavs from \"./SideNavs\";\n\n//Pages\nimport MainScreen from \"../screens/MainScreen\";\nimport Invoices from \"../screens/Invoices\";\n\nwithRouter(props => <Main {...props} />);\n\nclass Main extends Component {\n  state = {\n    navItems: [\n      {\n\n        id: 1,\n        name: \"Invoices\",\n        link: \"/\"\n       \n      },\n      {\n        id: 1,\n        name: \"Main Screen\",\n        link: \"/main\"\n      }\n    ]\n  };\n\n  render() {\n    return (\n      <div>\n        \n        <div className=\"menu_btn\">\n          <SideNavs NavItems={this.state.navItems} Component={Link} />\n        </div>\n\n        <Switch>\n          <Route exact path=\"/\" component={Invoices} />\n          <Route path=\"/main\" component={MainScreen} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Main);\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n    <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}